name: "Terraform Plan"

on:
  pull_request:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "mwong-tamu"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "learn-terraform-github-actions"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            module.exports = async (github, context) => {
                // Get pull requests that are open for current ref.
                const pullRequests = await github.rest.pulls.list({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: 'open',
                    head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
                })
            
                // Set issue number for following calls from context (if on pull request event) or from above variable.
                const issueNumber = context.issue.number || pullRequests.data[0].number
            
                // Retrieve existing bot comments for the PR
                const {data: comments} = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                })
                const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
                })
            
                // Prepare format of the comment - it has to be de-indented to make markdown work properly.
                const output = `
            #### Terraform Plan ðŸ“– \`${process.env.TERRAFORM_PLAN_STEP_OUTCOME}\`
            
            <hr>
            
            *Pusher: @${context.actor}*
            *Action: \`${context.eventName}\`*
            *Workflow: \`${context.workflow}\`*
            *Commit: \`${context.sha}\`*
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.TERRAFORM_PLAN}
            \`\`\`
            
            </details>`;
            
                // If we have a comment, update it, otherwise create a new one
                if (botComment) {
                    github.rest.issues.updateComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: botComment.id,
                        body: output
                    })
                } else {
                    github.rest.issues.createComment({
                        issue_number: issueNumber,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                    })
                }
            }
